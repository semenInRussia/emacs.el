#+TITLE: Config of Emacs from semenInRussia
#+AUTHOR: semenInRussia

* Hi!
  Hello, This is configuration of Emacs from semenInRussia!
  I create this configuration with help of [[https://github.com/daviwil/emacs-from-scratch/][this cool repo]].
  
  My moto is "Good Luck!", so my homepage is "Good Luck":

  #+BEGIN_SRC emacs-lisp :tangle ~/init.el

    (setq initial-buffer-choice "~/Start.org")

  #+END_SRC

* Package Management - base 
** use-package
   I am use [[https://github.com/jwiegley/use-package][use-package]]:
   
   #+BEGIN_SRC emacs-lisp :tangle ~/init.el
     (require 'package)

     (setq package-archives
           '(("melpa-stable" . "http://stable.melpa.org/packages/")
             ("melpa"        . "https://melpa.org/packages/")
             ("org"          . "https://orgmode.org/elpa/")
             ("elpa"         . "https://elpa.gnu.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
         (package-refresh-contents))

     (unless (package-installed-p 'use-package)
         (package-install 'use-package))

     (require 'use-package)
     #+END_SRC

** Packages Not in MELPA/ELPA/ORG-ELPA
*** Stranger Packages

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

(add-to-list 'load-path "~/.emacs.d/lisp")

#+END_SRC

*** My Packages

    #+BEGIN_SRC emacs-lisp :tangle ~/init.el

      (add-to-list 'load-path "~/projects/fast-exec.el")
      (add-to-list 'load-path "~/projects/porth-mode")
      (add-to-list 'load-path "~/projects/simple-indention.el")

      #+END_SRC

* Emacs Lisp
  I am use some packages for simple develop on Emacs Lisp
** Libraries
*** s
    This is [[https://github.com/magnars/s.el][s]]:
    #+BEGIN_SRC emacs-lisp :tangle ~/init.el
      (use-package s :ensure t)
      #+END_SRC
      
*** f
    This is [[https://github.com/rejeep/f.el][f]]:
    
    #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
      (use-package f :ensure t)
      #+END_SRC
      
*** Dash
    This is [[https://github.com/magnars/dash.el][dash:]]
    #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
      (use-package dash :ensure t)
      #+END_SRC

* Info about me for Emacs

  #+BEGIN_SRC emacs-lisp :tangle ~/init.el

    (setq user-full-name    "Semen Khramtsov"
          user-mail-address "hrams205@gmail.com"
          user-birthday     "2007-01-29"
          user-name         "semenInRussia"
          user-os           "Windows" ; "Windows" or "Linux"
          )


    (defun user-os-windows-p ()
        "If user have os Windows, then return t.
    Info take from var `user-os`, user must set it."
        (interactive)
        (s-equals? user-os "Windows")
        )

        #+END_SRC

** Congurlation me with my Birthday!

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el

     (if (s-equals? (format-time-string "%Y-%m-%d") user-birthday)
         (animate-birthday-present))

         #+END_SRC

* Organize Editing
** Snippets
   I am use [[https://github.com/joaotavora/yasnippet][yasnippet]]:

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el
     (use-package yasnippet
         :ensure t
         :init
         (yas-global-mode 1)
         :config
         (setq yas-snippet-dirs '("~/.emacs.d/snippets")))

   #+END_SRC
         
   And [[https://github.com/emacsmirror/yasnippet-classic-snippets][yasnippet-classic-snippets]] for basic snippets' collection:

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el
     (use-package yasnippet-classic-snippets :ensure t)
   #+END_SRC

*** More Simple Snippet Syntax
    I am use [[https://github.com/abo-abo/auto-yasnippet#auto-yasnippet][auto-yasnippet]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package auto-yasnippet
      :ensure t)

#+END_SRC

** Linters
   I am use [[https://www.flycheck.org/en/latest/][flycheck]]:

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el

     (use-package flycheck
         :ensure t
         :config (global-flycheck-mode 1))

   #+END_SRC

** Autocomplete
   I am use [[http://company-mode.github.io][company-mode]], I am set delay beetween typing text and viewing hints to
   0.8 seconds:

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el

     (use-package company
         :ensure t
         :custom
         (company-idle-delay                 0.3)
         (company-minimum-prefix-length      2)
         (company-show-numbers               t)
         (company-tooltip-limit              15)
         (company-tooltip-align-annotations  t)
         (company-tooltip-flip-when-above    t)
         (company-dabbrev-ignore-case        nil)
         :config
         (add-to-list 'company-backends 'company-keywords)
         (global-company-mode 1))

   #+END_SRC

   And for =yasnippet= I am use code from [[https://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names][this]] stackexchange:

   #+BEGIN_SRC emacs-lisp :tangle ~/init.el

     (defvar company-mode/enable-yas t
       "Enable yasnippet for all backends.")

     (defun company-mode/backend-with-yas (backend)
         (if (or (not company-mode/enable-yas)
                 (and (listp backend) (member 'company-yasnippet backend)))
             backend
             (append (if (consp backend) backend (list backend))
                     '(:with company-yasnippet))))

     (setq company-backends
           (mapcar #'company-mode/backend-with-yas company-backends))

    #+END_SRC

*** More Pretty Auto Complete
    I am use popular [[https://github.com/sebastiencs/company-box][company-box]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package company-box
      :ensure t
      :hook (company-mode . company-box-mode))

#+END_SRC


** Autocompletion by Initials
   For autocompletion by initials I am use [[https://github.com/baohaojun/bbyac][bbyac]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package browse-kill-ring
      :ensure t)

  (defcustom bbyac-major-modes-maps (list emacs-lisp-mode-map)
    "List of maps of `major-modes` which support `bbyac`.")

  (use-package bbyac
      :ensure t
      :init
      (--each bbyac-major-modes-maps
          (define-key it (kbd "C-j") 'bbyac-expand-symbols)
          ))


#+END_SRC

** Format All Code
   Each programmer need to format code for this I am use [[https://github.com/lassik/emacs-format-all-the-code][format-all]], its support 65 languages:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package format-all
      :ensure t
      )

#+END_SRC

** Main keymaps
   I am use [[https://github.com/xahlee/xah-fly-keys][xah-fly-keys]], this as VIM, but keymaps created for keyboard (in VIM keymaps created for easy remember):
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (require 'xah-fly-keys)

  (xah-fly-keys-set-layout "qwerty")
  (xah-fly-keys 1)

  (define-key xah-fly-command-map (kbd "SPC l") nil)
  (define-key xah-fly-command-map (kbd "SPC j") nil)
  (define-key xah-fly-command-map (kbd "SPC SPC") nil)

#+END_SRC
** Functions for Define Keys

   Function =define-key-when= is wrap on =define-key=, but function DEF will call when
will pressed KEY in KEYMAP and when CONDITION will true:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

     (defun keymap-to-list (keymap)
         "Convert `KEYMAP` to list."
         (--filter (ignore-errors '((cat it) (cdr it))) (-drop 1 keymap))
         )


     (defun function-of-key (keymap key)
         "Get function bound on `KEY` in `KEYMAP`."
         (let* ((list-keymap (keymap-to-list keymap))
                (kbd-key (kbd key))
                (key-chars (string-to-list kbd-key))
                (head-key-char (-first-item key-chars))
                (tail-key-chars (-drop 1 key-chars))
                (object-on-key (--filter (ignore-errors
                                             (eq head-key-char (-first-item it)))
                                         list-keymap))
                )
             (cond
               (tail-key-chars
                (function-of-key object-on-key
                                 (chars-to-string tail-key-chars)))
               (t (cdr (-first-item object-on-key)))))
         )


     (defun chars-to-string (chars)
         "Convert list of `CHARS` to string."
         (--reduce-from (s-concat acc (char-to-string it)) "" chars)
         )


     (defmacro define-key-when (keymap key def condition)
         "Macro for define keymaps for `rectangle-mode` in `xah-fly-command-mode`"
         `(define-key ,keymap (kbd ,key)
              (lambda ()
                  (interactive)
                  (if (funcall ,condition)
                      (call-interactively ,def)
                      (call-interactively ',(function-of-key (eval keymap) key)))))
         )

#+END_SRC

** Search
   I am press ='= for search word:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package swiper-helm
      :ensure t
      :bind (:map xah-fly-command-map
                  ("'" . swiper-helm))
      )

#+END_SRC

** Search and Replace
   I am use =SPC r= for replace word in buffer, and =SPC SPC r= for replace word in project:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (define-key xah-fly-command-map (kbd "SPC SPC r") 'projectile-replace)

#+END_SRC


** Navigation beetween Functions/Classes/etc.
   I am use =imenu= with keymap =SPC SPC SPC=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq imenu-auto-rescan t)
  (define-key xah-fly-command-map (kbd "SPC SPC") nil)
  (define-key xah-fly-command-map (kbd "SPC SPC SPC") 'imenu)

#+END_SRC

*** In Project
    For Imenu In Project I am use [[https://github.com/vspinu/imenu-anywhere][imenu-anywhere]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package imenu-anywhere
      :ensure t
      :bind (:map xah-fly-command-map
                  ("SPC SPC n" . imenu-anywhere)))

#+END_SRC


** Jump to Defnition
   I am use [[https://github.com/jacktasia/dumb-jump][cool package dumb-jump]] for jump to defnition in 50+ languages:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package rg
      :ensure t
      )

  (use-package dumb-jump
      :ensure t
      :custom
      (dumb-jump-force-searcher 'rg)
      (dumb-jump-prefer-searcher 'rg)
      :init
      (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
      )

#+END_SRC

** Multiple Cursors
   I am use package of magnars [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (use-package multiple-cursors
      :ensure t
      :bind
      (:map xah-fly-command-map
            ("7" . mc/mark-next-like-this-word)
            ("SPC 7" . 'mc/mark-previous-like-this-word)
            ("SPC SPC 7" . mc/edit-beginnings-of-lines)))

#+END_SRC

** Very Fast Jump
   I am use [[https://github.com/abo-abo/avy][avy]]:
   
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (use-package avy
      :ensure t
      :custom (avy-background t)
      :bind ((:map xah-fly-command-map)
             ("n"           . avy-goto-char)
             ("SPC SPC v"   . avy-yank-word)
             ("SPC SPC x"   . avy-teleport-word)
             ("SPC SPC c"   . avy-copy-word)
             ("SPC SPC d"   . avy-kill-word)
             ("SPC SPC l c" . avy-copy-line)
             ("SPC SPC l x" . avy-move-line)
             ("SPC SPC l d" . avy-kill-whole-line)))


  (defun avy-goto-word-1-with-action (char action &optional arg beg end symbol)
    "Jump to the currently visible CHAR at a word start.
  The window scope is determined by `avy-all-windows'.
  When ARG is non-nil, do the opposite of `avy-all-windows'.
  BEG and END narrow the scope where candidates are searched.
  When SYMBOL is non-nil, jump to symbol start instead of word start.
  Do action of `avy' ACTION.'"
    (interactive (list (read-char "char: " t)
                       current-prefix-arg))
    (avy-with avy-goto-word-1
      (let* ((str (string char))
             (regex (cond ((string= str ".")
                           "\\.")
                          ((and avy-word-punc-regexp
                                (string-match avy-word-punc-regexp str))
                           (regexp-quote str))
                          ((<= char 26)
                           str)
                          (t
                           (concat
                            (if symbol "\\_<" "\\b")
                            str)))))
        (avy-jump regex
                  :window-flip arg
                  :beg beg
                  :end end
                  :action action))))


  (defun avy-teleport-word (char &optional arg)
      "Teleport word searched by `arg' with CHAR.
  Pass ARG to `avy-jump'."
      (interactive "cchar:\nP")
      (avy-goto-word-1-with-action char 'avy-action-teleport)
      )


  (defun avy-copy-word (char &optional arg)
      "Copy word searched by `arg' with CHAR.
  Pass ARG to `avy-jump'."
      (interactive "cchar:\nP")
      (avy-goto-word-1-with-action char 'avy-action-copy)
      )


  (defun avy-yank-word (char &optional arg)
      "Paste word searched by `arg' with CHAR.
  Pass ARG to `avy-jump'."
      (interactive "cchar:\nP")
      (avy-goto-word-1-with-action char 'avy-action-yank)
      )


  (defun avy-kill-word (char &optional arg)
      "Paste word searched by `arg' with CHAR.
  Pass ARG to `avy-jump'."
      (interactive "cchar:\nP")
      (avy-goto-word-1-with-action char 'avy-action-kill-stay)
      )


#+END_SRC

** Smart Parens
*** Smartparens
   I am use [[https://github.com/Fuco1/smartparens/][smartparens]], for slurp expresion I am use =]=, also for splice parens I am
use =-=, for navigating I am use `.` and `m`:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (defun forward-slurp-sexp ()
      "My version of `sp-slurp-sexp`."
      (interactive)
      (save-excursion
          (backward-char)
          (sp-forward-slurp-sexp)))


  (defun splice-sexp ()
      "My version of `sp-splice-sexp`."
      (interactive)
      (save-excursion
          (backward-char)
          (sp-splice-sexp)))


  (use-package smartparens
      :ensure t
      :init
      (smartparens-global-mode 1)
      :bind (:map xah-fly-command-map
                  (("]" . forward-slurp-sexp)
                   ("-" . splice-sexp)
                   ("SPC -" . sp-rewrap-sexp)
                   ("m" . sp-backward-sexp)
                   ("." . sp-forward-sexp)
                   ("SPC 1" . sp-join-sexp)
                   ("SPC SPC 1" . sp-split-sexp)
                   ("SPC 9" . sp-change-enclosing)
                   ("SPC SPC g" . sp-kill-hybrid-sexp)
                   ("SPC =" . sp-raise-sexp)
                   )))

#+END_SRC
*** Special Configuration for Major Modes
    For enable builtin smartparens configuration for major modes, add require statement to =.emacs.el=, with name of major mode and smartparens prefix:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (require 'smartparens-config)

#+END_SRC

*** Delete Only Parens without Inner Contents

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun delete-only-1-char ()
    "Delete only 1 character before point."
    (interactive)
    (backward-char)
    (delete-char 1)
    )

(define-key xah-fly-command-map (kbd "DEL") 'delete-only-1-char)
#+END_SRC

** Smart Select Text
   I am use cool package [[https://github.com/magnars/expand-region.el/][expand-region]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (defun mark-inner-or-expand-region ()
      "If text is selected, expand region, otherwise then mark inner of brackets."
      (interactive)
      (if (use-region-p)
          (call-interactively 'er/expand-region)
          (progn
              (-when-let (ok (sp-get-sexp))
                  (sp-get ok
                      (set-mark :beg-in)
                      (goto-char :end-in))))))

  (use-package expand-region
      :ensure t
      :bind
      (:map xah-fly-command-map
            ("1" . er/expand-region)
            ("9" . mark-inner-or-expand-region)
            ("m" . sp-backward-up-sexp)))

#+END_SRC
** Macros
   I am use =\= in command mode for start of record macro.
   I am also use =SPC RET= for execute last macro or execute macro to lines:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun kmacro-start-or-end-macro ()
      "If macro record have just started, then stop this record, otherwise start."
      (interactive)
      (if defining-kbd-macro
          (kmacro-end-macro 1)
          (kmacro-start-macro 1)))

  (define-key xah-fly-command-map (kbd "\\") 'kmacro-start-or-end-macro)

  (defun kmacro-call-macro-or-apply-to-lines (arg &optional top bottom)
   "If selected region, then apply macro to selected lines, otherwise call macro."
      (interactive
       (list
        1
        (if (use-region-p) (region-beginning) nil)
        (if (use-region-p) (region-end) nil)))

      (if (use-region-p)
          (apply-macro-to-region-lines top bottom)
          (kmacro-call-macro arg)))

  (define-key xah-fly-command-map (kbd "SPC RET") 'kmacro-call-macro-or-apply-to-lines)

#+END_SRC

#+RESULTS:
: kmacro-call-macro-or-apply-to-lines
** Special Strings as Seperated Buffers
   I am use [[https://github.com/QBobWatson/poporg][poporg]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package poporg
      :ensure t
      :bind (:map xah-fly-command-map
                  ("`" . poporg-dwim))
      )

#+END_SRC

** Transpose
   I am press =n=, when select text for transpose lines in region:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (define-key-when xah-fly-command-map "n" 'avy-transpose-lines-in-region
                   'use-region-p)

#+END_SRC

** Custom Deleting Text
   I am delete this line and edit this by press =w=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun delete-and-edit-current-line ()
      "Delete current line and instroduce to insert mode."
      (interactive)
      (beginning-of-line-text)
      (kill-line)
      (xah-fly-insert-mode-init)
      )

  (define-key xah-fly-command-map (kbd "w") 'delete-and-edit-current-line)

#+END_SRC

    I am delete content of this line (including whitespaces) on press =SPC w=:
    
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun clear-current-line ()
      "Clear content of current line (including whitespaces)."
      (interactive)
      (kill-region (line-beginning-position) (line-end-position))
      )

  (define-key xah-fly-command-map (kbd "SPC w") 'clear-current-line)
#+END_SRC

** Custom Selecting Text
   I am press 2 times =8= for selecting 2 words

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun select-current-or-next-word ()
      "If word was selected, then move to next word, otherwise select word."
      (interactive)
      (if (use-region-p)
          (forward-word)
          (xah-extend-selection))
      )

  (define-key xah-fly-command-map (kbd "8") 'select-current-or-next-word)

#+END_SRC

    I am press =g=, for deleting current block, but if selected region, then I am cancel 
this select:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun delete-current-text-block-or-cancel-selection ()
      "If text is selected, then cancel selection, otherwise delete current block."
      (interactive)
      (if (use-region-p)
          (deactivate-mark)
          (xah-delete-current-text-block)))

  (define-key xah-fly-command-map (kbd "g") nil)
  (define-key xah-fly-command-map (kbd "g") 'delete-current-text-block-or-cancel-selection)

#+END_SRC

I am press =-= for change position when select text to begin/end of selected region:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (define-key-when xah-fly-command-map "-" 'exchange-point-and-mark 'use-region-p)

#+END_SRC

** Custom Editing Text
   I am use =s= for inserting new line:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun open-line-saving-indent ()
      "Inserting new line, saving position and inserting new line."
      (interactive)
      (newline-and-indent)
      (forward-line -1)
      (end-of-line)
      )

  (define-key xah-fly-command-map (kbd "s") 'open-line-saving-indent)

#+END_SRC

And I am press =p= for inserting space, and if I am selected region,  for inserting space
to beginning of each line:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun insert-space-before-line ()
      "Saving position, insert space to beginning of current line."
       (interactive)
       (save-excursion (beginning-of-line-text)
                      (xah-insert-space-before))
      )

  (defun insert-spaces-before-each-line-by-line-nums (start-line end-line)
      "Insert space before each line in region (`START-LINE`; `END-LINE`)."
      (unless (= 0 (+ 1 (- end-line start-line)))
          (goto-line start-line)
          (insert-space-before-line)
          (insert-spaces-before-each-line-by-line-nums (+ start-line 1) end-line))
      )

  (defun insert-spaces-before-each-line (beg end)
      "Insert spaces before each selected line, selected line indentifier with `BEG` & `END`."
      (interactive "r")
      (save-excursion
          (let (deactivate-mark)
              (let ((begining-line-num (line-number-at-pos beg))
                    (end-line-num (line-number-at-pos end)))
                  (insert-spaces-before-each-line-by-line-nums begining-line-num end-line-num))))
      )

  (defun insert-spaces-before-or-to-beginning-of-each-line (beg end)
      "Insert space, and if selected region, insert space to beginning of each line, text is should will indentifier with `BEG` & `END`."
      (interactive (list (if (use-region-p) (region-beginning))
                         (if (use-region-p) (region-end))))
      (if (use-region-p)
          (insert-spaces-before-each-line beg end)
          (xah-insert-space-before))
      )


  (define-key xah-fly-command-map (kbd "p") nil)
  (define-key xah-fly-command-map (kbd "p") 'insert-spaces-before-or-to-beginning-of-each-line)

#+END_SRC

** Custom Navigation
   I am press =m= and =.= for go to next, previous sexp:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (define-key xah-fly-command-map (kbd "m") 'backward-sexp)
  (define-key xah-fly-command-map (kbd ".") 'forward-sexp)

#+END_SRC

** Rectangles

I am press =SPC t= for enable =rectangle-mark-mode=, and =f= when =rectangle-mark-mode=
is enabled for replace rectangle:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (require 'rect)

  (define-key xah-fly-command-map (kbd "SPC t") 'rectangle-mark-mode)
  (define-key xah-fly-command-map (kbd "SPC v") 'yank-rectangle)

  (define-key-when xah-fly-command-map "c" 'copy-rectangle-as-kill
           (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "d" 'kill-rectangle
           (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "x" 'kill-rectangle
           (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "f" 'replace-rectangle
           (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "q" 'delimit-columns-rectangle
           (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "s" 'open-rectangle
          (lambda () rectangle-mark-mode))

  (define-key-when xah-fly-command-map "-" 'rectangle-exchange-point-and-mark
          (lambda () rectangle-mark-mode))

#+END_SRC

** Indent Settings
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width          4)
  (setq-default c-basic-offset     4)
  (setq-default standart-indent    4)
  (setq-default lisp-body-indent   4)


  (defun select-current-line ()
      "Select as region current line."
      (interactive)
      (forward-line 0)
      (set-mark (point))
      (end-of-line)
      )


  (defun indent-line-or-region ()
      "If text selected, then indent it, otherwise indent current line."
      (interactive)
      (save-excursion
          (if (use-region-p)
              (indent-region (region-beginning) (region-end))
              (funcall indent-line-function)
              ))
      )


  (global-set-key (kbd "RET") 'newline-and-indent)
  (define-key xah-fly-command-map (kbd "q") 'indent-line-or-region)
  (define-key xah-fly-command-map (kbd "SPC q") 'join-line)

  (setq lisp-indent-function  'common-lisp-indent-function)

#+END_SRC

I am press =SPC , ,= for go to defnition:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (define-key xah-fly-command-map (kbd "SPC .") 'xref-find-definitions)

#+END_SRC

* Support of Languages
** Functions for extending functional of language
*** Functions for Navigating
   Function `add-nav-forward-block-keymap-for-language` defines key for 
`forward-block`.
   And function `add-nav-backward-block-keymap-for-language` define key for
`backward-block`.

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defmacro add-nav-forward-block-keymap-for-language (language forward-block-function)
      "Bind `FORWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC l")
                    ',forward-block-function)))))


  (defmacro add-nav-backward-block-keymap-for-language (language backward-block-function)
      "Bind `BACKWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC j")
                    ',backward-block-function)))))

#+END_SRC

Function `add-nav-to-imports-for-language`, is define keys for go to imports:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

(defmacro add-nav-to-imports-for-language (language to-imports-function)
  "Bind `TO-IMPORTS-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
          (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC SPC i")
                    ',to-imports-function)))))

#+END_SRC

*** Functions for Pretty View
  I am use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] for centering content of org file:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (require 'face-remap)

  (use-package visual-fill-column
      :ensure t)

  (defun visual-fill (width)
      (interactive (list 70))
      (setq-default visual-fill-column-width width
                    visual-fill-column-center-text t)
      (text-scale-mode 0)
      (visual-fill-column-mode 1))
#+END_SRC

*** Functions for Import
    Function `add-import-keymap-for-language` defines key for `add-import`.

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (define-key xah-fly-command-map (kbd "SPC e") 'xah-fly-c-keymap)

  (defmacro add-import-keymap-for-language (language add-import-function)
      "Bind `ADD-IMPORT-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC i")
                    ',add-import-function)))))

#+END_SRC

*** Functions/Variables for Run Command
    Var =pandoc-input-format-major-modes= is list of pair from major mode, which is one of input formats of Pandoc (see [[https://pandoc.org][this]]) and this format's pandoc codes (markdown, latex)

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defcustom pandoc-input-format-major-modes
    nil
    "List of pair from mode, one of input formats of Pandoc and pandoc codes
  See this https://pandoc.org
  Examples of codes (latex, markdown)"
    )

#+END_SRC

** Supported Languages
*** LaTeX
**** Vars
     I am use =LaTeX-mode=:
     
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-to-list 'TeX-modes 'LaTeX-mode)

#+END_SRC

     
     Variable `latex-documentclasses` is list of documentclasses in Emacs, each element
 of this list is name of documentclass in lower case. Defaults to:
 
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (setq latex-documentclasses 
     '("article" "reoport" "book" "proc" "minimal" "slides" "memoir" "letter" "beamer"))
 #+END_SRC
 
**** Visual Fill

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (dolist (mode (list 'TeX-mode-hook
                      'tex-mode-hook
                      'latex-mode-hook
                      'LaTeX-mode-hook))
      (add-hook mode (lambda () (call-interactively 'visual-fill))))


#+END_SRC
**** Preview
     I am use [[https://github.com/emacsmirror/auctex][auctex]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package auctex
      :ensure t)

#+END_SRC
**** Keymaps
     I am press =SPC e= for make text italic:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun latex-wrap-text (command)
      "If regions select, wrap region with COMMAND, otherwise wrap word."
      (unless (use-region-p)
          (set-mark (point))
          (forward-word)
          (exchange-point-and-mark)
          (backward-word))

      (goto-char (region-beginning))
      (insert (s-lex-format "\\${command}{"))
      (goto-char (region-end))
      (insert "}")
      )


  (defun latex-make-text-italic ()
      "If regions select, wrap region with `emph`, otherwise make word."
      (interactive)
      (latex-wrap-text "emph")
      )


  (defun latex-make-text-bold ()
      "If regions select, wrap region with `textbf`, otherwise make word."
      (interactive)
      (latex-wrap-text "emph")
      )

  (defun latex-make-text-formula ()
      "If regions select, make region formula, otherwise make line formula."
      (interactive)
      (unless (use-region-p)
          (end-of-line)
          (set-mark (point-at-bol))
          )
      (let ((text-beg (region-beginning))
            (text-end (region-end)))
          (deactivate-mark)
          (goto-char text-beg)
          (insert "\\[")

          (goto-char (+ text-end 2))
          (insert "\\]"))
      )


  (--each '(tex-mode-hook latex-mode-hook LaTeX-mode-hook)
      (add-hook it (lambda ()
                       (define-key xah-fly-command-map (kbd "SPC *")
                           'latex-make-text-formula)
                       (define-key xah-fly-command-map (kbd "SPC e")
                           'latex-make-text-italic)
                       (define-key xah-fly-command-map (kbd "SPC b")
                           'latex-make-text-italic))
                ))


#+END_SRC

*** Org
**** Centering 
     I am centering text, when enable =org-mode=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'org-mode-hook (lambda () (call-interactively 'visual-fill)))

#+END_SRC

**** Complie
     I am use [[https://github.com/bard/emacs-run-command][run-command]], and [[https://pandoc.org][pandoc]] to complie to special formats:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-to-list 'pandoc-input-format-major-modes
               '(org-mode "org"))

#+END_SRC

**** Load from Wiki
     I am use [[https://github.com/progfolio/wikinforg][wikinforg]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package wikinforg
    :ensure t)

#+END_SRC

**** Drag and Drop Images
     I am use [[https://github.com/abo-abo/org-download][org-download]] for this:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package org-download
      :ensure t
      :hook
      (dired-mode-hook . org-download-enable)
      )

#+END_SRC

**** Navigation
     I am use [[https://github.com/emacs-helm/helm-org][helm-org]] for navigation in Org Mode:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-org
      :ensure t
      :bind (:map org-mode-map
                  ([remap imenu] . helm-org-in-buffer-headings)))

#+END_SRC

*** Elisp
**** Special Linters
***** Package Linter
      I am use [[https://github.com/purcell/package-lint][package-lint]] for lint my packages for Melpa for view I am use [[https://github.com/purcell/flycheck-package][flycheck-package]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package package-lint
      :ensure t
      )

  (use-package flycheck-package
      :ensure t
      :init
      (flycheck-package-setup)
      )

#+END_SRC

# ***** ELSA (Static Analyzer)
#       I am use [[https://github.com/emacs-elsa/Elsa#how-do-i-run-it][ELSA]] and [[https://github.com/emacs-elsa/flycheck-elsa][flycheck-elsa]]:

# #+BEGIN_SRC emacs-lisp :tangle ~/init.el

#   (use-package elsa
#       :ensure t)

#   (use-package flycheck-elsa
#       :ensure t
#       :init
#       (add-hook 'emacs-lisp-mode-hook #'flycheck-elsa-setup)
#       ;; (add-to-list 'flycheck-checkers 'flyc))
#       )

# #+END_SRC

**** Refactoring
     I am use [[https://github.com/Wilfred/emacs-refactor][emacs-refactor]] for refactor not only in =emacs-lisp=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package emr
      :ensure t
      :bind (:map xah-fly-command-map
                  ("SPC /" . emr-show-refactor-menu)))
#+END_SRC

**** Package Manager
     I am use [[https://github.com/cask/cask/][Cask]] for manage packages of =elisp=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package cask-mode
      :ensure t
      )

#+END_SRC

**** Modern Documentation
     I am use [[https://github.com/Wilfred/suggest.el][suggest]], I am just type print input and excepted output and see suggesting examples as this do:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package suggest
      :ensure t
      )

#+END_SRC

*** Markdown
    I am use [[https://github.com/jrblevin/markdown-mode/][markdown-mode]] , and for its I am centering code:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package markdown-mode
      :ensure t)

  (add-hook 'markdown-mode-hook (lambda () (call-interactively 'visual-fill)))

#+END_SRC

**** Create Table of Contents
     I am use [[https://github.com/ardumont/markdown-toc][markdown-toc]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package markdown-toc
      :ensure t
      :init
      (defun fast-exec-define-markdown-toc-keys ()
          "Bind `markdown-toc' and `fast-exec'."
          (fast-exec/some-commands
           ("Make Table of Contents in Markdown"
            'markdown-toc-generate-or-refresh-toc))
          )
      (fast-exec/register-keymap-func 'fast-exec-define-markdown-toc-keys)
      (fast-exec/reload-functions-chain))

#+END_SRC


**** Complie
     I am use [[https://github.com/bard/emacs-run-command][run-command]], and [[https://pandoc.org][pandoc]] to complie to special formats:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-to-list 'pandoc-input-format-major-modes
               '(markdown-mode "markdown"))

  (add-to-list 'pandoc-input-format-major-modes
               '(gfm-mode "markdown"))

#+END_SRC

*** Python
**** Vars
     Var =py/imports-regexp= is regexp of import statements in python:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq py/imports-regexp "import\\|from")

#+END_SRC

Var =python-shell-interpreter= is builtin Emacs var, see docs in Emacs:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq python-shell-interpreter "python")

#+END_SRC

**** Navigation

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-nav-forward-block-keymap-for-language
   python-mode
   python-nav-forward-block)


  (add-nav-backward-block-keymap-for-language
   python-mode
   python-nav-backward-block)


  (defun py-nav-to-imports ()
      "Navigate to imports in Python mode."
      (interactive)
      (push-mark)
      (let ((old-pos (point)))
          (goto-char (point-min))
          (search-forward-regexp py/imports-regexp old-pos old-pos))
      )

  (add-nav-to-imports-for-language
   python-mode
   py-nav-to-imports)

#+END_SRC

**** Linters
     
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq flycheck-python-flake8-command "python -m flake8")
  (setq flycheck-python-mypy-executable "python -m mypy")
  (setq flycheck-python-pylint-executable "python -m pylint")

#+END_SRC

**** Helping info
     I am use [[https://www.emacswiki.org/emacs/pydoc-info.el][pydoc-info]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package pydoc
      :ensure t)

#+END_SRC

**** Autocomplete
     I am hasn't autocompletion special for python, so I enable default =dabbrev-autocompletion=:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun enable-dabbrev-company-backend ()
      "Add `company-dabbrev' backend to `company-backends' for local major mode."
      (interactive)
      (setq-local company-backends (cons 'company-dabbrev company-backends))
      )


  (add-hook 'python-mode-hook 'enable-dabbrev-company-backend)

#+END_SRC

*** Go Lang
    I am use [[https://github.com/dominikh/go-mode.el][go-mode]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package go-mode
      :ensure t)

  (use-package go-eldoc
      :ensure t
      :hook (go-mode-hook . 'go-eldoc-setup))

#+END_SRC

**** Add Import

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-import-keymap-for-language go-mode
                                  go-import-add)

#+END_SRC

*** PDF
    I am use [[https://github.com/vedang/pdf-tools][pdf-tools]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package pdf-tools
      :ensure t
      )

#+END_SRC

*** Haskell
    I am use [[https://github.com/haskell/haskell-mode][haskell-mode]], and I love =indention-mode=:

 #+BEGIN_SRC emacs-lisp :tangle ~/init.el

   (use-package haskell-mode
       :ensure t
       :hook (haskell-mode . haskell-indent-mode))

   (add-import-keymap-for-language
    haskell-mode
    haskell-add-import)

   (add-nav-to-imports-for-language
    haskell-mode
    haskell-navigate-imports)

   (add-nav-forward-block-keymap-for-language
    haskell-mode
    haskell-ds-forward-decl)

   (add-nav-backward-block-keymap-for-language
    haskell-mode
    haskell-ds-backward-decl)

 #+END_SRC
**** Auto Completion for Haskell
     I am use [[https://github.com/horellana/company-ghci][company-ghci]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package company-ghci
      :ensure t
      :init
      (push 'company-ghci company-backends)
      (add-hook 'haskell-mode-hook 'company-mode)
      (add-hook 'haskell-interactive-mode-hook 'company-mode))

#+END_SRC
     

*** JavaScript (Node.js)
**** Variables
     Variable `js/imports-regexp` if regular expression for search imports in JS. 
Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq js/imports-regexp "import")

#+END_SRC

Variable `js/function-or-class-regexp` if regular expression for search imports in JS. 
Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq js/function-or-class-regexp "function \\|class ")

#+END_SRC

**** Repl
     I am use [[https://github.com/redguardtoo/js-comint][js-comint]] for run my JS' code:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package js-comint
      :ensure t)

  (if (user-os-windows-p)
      (setq js-comint-program-command "C:/Program Files/nodejs/node.exe"))

#+END_SRC

**** Linters
     I am use some packages which you can see on [[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#summary][this]] page:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package web-mode
      :ensure t)

  (use-package js2-mode
      :ensure t)

  (use-package json-mode
      :ensure t)

  (add-to-list 'auto-mode-alist '("\\.jsx$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

#+END_SRC

**** Navigation

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun js/nav-to-imports ()
      "Navigate to imports in JS mode."
      (interactive)
      (push-mark)
      (let ((old-pos (point)))
          (goto-char (point-min))
          (search-forward-regexp js/imports-regexp old-pos old-pos))
      )

  (add-nav-to-imports-for-language
   js2-mode
   js/nav-to-imports)


  (defun js/nav-forward-function-or-class ()
      "Navigate to next function or class in JS."
      (interactive)
      (search-forward-regexp js/function-or-class-regexp)
      )

  (add-nav-forward-block-keymap-for-language
   js2-mode
   js/nav-forward-function-or-class)

#+END_SRC

*** HTML
    I am use [[https://web-mode.org][web-mode]] and [[https://github.com/smihica/emmet-mode][emmet]] and [[https://github.com/jcs-elpa/auto-rename-tag][auto-rename-tag]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (use-package web-mode
      :ensure t
      :hook (web-mode . yas-minor-mode-off)
      :custom
      (web-mode-script-padding 1)
      (web-mode-block-padding 0)
      )


  (use-package auto-rename-tag
      :ensure t
      :config
      :init
      (--each html-modes
          (add-hook (intern (s-append "-hook" (symbol-name it)))
                    (lambda () (auto-rename-tag-mode 38)))))


  (use-package emmet-mode
      :ensure t
      :custom (emmet-move-cursor-between-quotes t)
      :hook
      (web-mode . emmet-mode)
      (mhtml-mode . emmet-mode)
      (css-mode . emmet-mode)
      (html-mode . emmet-mode))


  (use-package helm-emmet
      :ensure t
      :init
      (defun fast-exec-helm-emmet-keys ()
          "Keymaps for `helm-emmet'."
          (fast-exec/some-commands
           ("View Emmet Cheat" 'helm-emmet)))
      (fast-exec/register-keymap-func 'fast-exec-helm-emmet-keys)
      (fast-exec/reload-functions-chain))

#+END_SRC

**** Variables
     Variable =html-modes= is list of modes which is for =html=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defcustom html-modes '(web-mode html-mode mhtml-mode)
    "List of `html` major modes.")

#+END_SRC

**** =Paredit= for HTML
     I am use [[https://github.com/magnars/tagedit][tagedit]] of =magnars=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (use-package tagedit
      :ensure t
      :init
      (--each html-modes
          (let ((map (eval (intern (s-append "-map" (symbol-name it))))))
              (define-key map
                  [remap sp-kill-hybrid-sexp] 'tagedit-kill)
              (define-key map
                  [remap sp-join-sexp] 'tagedit-join-tags)
              (define-key map
                  [remap sp-raise-sexp] 'tagedit-raise-tag)
              (define-key map
                  [remap splice-sexp] 'tagedit-splice-tag)
              (define-key map
                  [remap sp-change-enclosing] 'tagedit-kill-attribute))))

#+END_SRC

**** Auto Complete for HTML
     I am use [[https://github.com/osv/company-web][company-web]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package company-web
      :ensure t
      :init
      (add-hook 'web-mode-hook
                (lambda ()
                    (set (make-local-variable 'company-backends)
                         '(company-web-html))
                    (company-mode t))))

#+END_SRC

*** CSS
    I am use =css-eldoc= from =Elpa=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package css-eldoc
      :ensure t
      :init
      (dolist (hook (list 'web-mode-hook 'css-mode-hook))
          (add-hook hook 'css-eldoc-enable)))

#+END_SRC

* Support of Some Special Modes
** Calc
   I am use built-in emacs =calc=, I disable =xah-fly-keys= when run calc:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'calc-mode-hook (lambda () (interactive) (xah-fly-keys 0)))
  (add-hook 'calc-end-hook (lambda () (interactive) (xah-fly-keys 38)))

#+END_SRC

* Small Organize Tricks
** Very Small Tricks

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (show-paren-mode 2)
  (setq make-backup-files         nil)
  (setq auto-save-list-file-name  nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (toggle-truncate-lines 38)

#+END_SRC
** Highlight Git Changes
   I am use [[https://github.com/emacsorphanage/git-gutter][git-gutter]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package git-gutter
      :ensure t
      :hook
      (prog-mode . git-gutter-mode))

#+END_SRC
** See Emacs [Lisp] Errors, Messages
   I am use [[https://github.com/akirak/helm-tail][helm-tail]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-tail
      :ensure t
      :init
      (defun fast-exec-define-helm-tail-keys ()
          "This is bind `fast-exec' with `helm-tail'."
          (fast-exec/some-commands
           ("Open Tail" 'helm-tail)))
      (fast-exec/register-keymap-func 'fast-exec-define-helm-tail-keys)
      (fast-exec/reload-functions-chain))

#+END_SRC

** Helpful
*** Which Key?
    
    I am use [[https://github.com/justbur/emacs-which-key][which-key]]:
    
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package which-key
    :ensure t
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
*** Helpful Package
    I am use [[https://github.com/Wilfred/helpful][helpful]], for pretty help info about lisp functions and major modes:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helpful
      :ensure t
      :init
      (global-set-key (kbd "C-h f") #'helpful-callable)
      (global-set-key (kbd "C-h v") #'helpful-variable)
      (global-set-key (kbd "C-h k") #'helpful-key)
      (global-set-key (kbd "C-c C-d") #'helpful-at-point)
      (global-set-key (kbd "C-h F") #'helpful-function)
      (global-set-key (kbd "C-h C") #'helpful-command))

#+END_SRC

** Framework for Incremental Completions and Narrowing Selections 
   I am use [[https://github.com/emacs-helm/helm][HELM]]:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm
     :ensure t
     :config (setq-default helm-M-x-fuzzy-match t)
     :init (helm-mode 1)
     :bind (:map xah-fly-command-map
                 ("SPC SPC f" . helm-find-files)))


#+END_SRC
** Fast Executing Command
   I am use [[https://github.com/semenInRussia/fast-exec.el][fast-exec]]:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

      (require 'fast-exec)

      (fast-exec/enable-some-builtin-supports haskell-mode
                                              flycheck
                                              magit
                                              projectile
                                              skeletor
                                              yasnippet
                                              format-all
                                              wikinforg
                                              suggest
                                              devdocs
                                              helm-wikipedia)

      (fast-exec/initialize)

      (define-key xah-fly-command-map (kbd "=") 'fast-exec/exec)

#+END_SRC

** Translate
   I am use [[https://github.com/atykhonov/google-translate][google-translate]]:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package google-translate
      :ensure t
      :bind
      (:map xah-fly-command-map
            ("SPC \\" . google-translate-at-point)))

  (defun google-translate--search-tkk ()
    "Search TKK. From https://github.com/atykhonov/google-translate/issues/137.
  Thank you https://github.com/leuven65!"
    (list 430675 2721866130))

#+END_SRC

** Command Log
   I am use [[https://github.com/lewang/command-log-mode][command-log-mode]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package command-log-mode
      :ensure t)

#+END_SRC

** Whitespaces Mode
   I am enable whitespaces mode on =prog-mode=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'prog-mode-hook 'whitespace-mode)

#+END_SRC

** Visual Fill Line Mode
   I am ussally use =visual-fill-line-mode=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'change-major-mode-hook 'visual-line-mode)

#+END_SRC

** Auto Fill Mode
   I am enable =auto-fill-mode= mode when start emacs:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'change-major-mode-hook (lambda ()
                                        (interactive)
                                        (auto-fill-mode 1)
                                        ))

#+END_SRC

** Scratches
   I am press =C-t= for opening scratch for this I am use [[https://github.com/ieure/scratch-el][scratch-el]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package scratch
      :ensure t
      :bind (("C-t" . scratch))
      )

#+END_SRC

** Sub Word Mode
   I am use builtin =subword-mode=:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (global-subword-mode)

#+END_SRC

** Syntax Subword Mode
   I am use [[https://melpa.org/#/syntax-subword][syntax-subword]], for example if I am in current situation:

#+BEGIN_SRC shell
   \|print(name)
#+END_SRC

   And i am need to delete indent, I am just delete its when delete backward word:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package syntax-subword
      :ensure t
      :custom
      (syntax-subword-skip-spaces t)
      :config
      (global-syntax-subword-mode)
      )

#+END_SRC

** Auto Save
   I am use [[https://github.com/bbatsov/super-save][super-save]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-to-list 'load-path "~/projects/super-save/")

  (use-package super-save
      :config
      (setq super-save-exclude '("Emacs.org"))
      (setq auto-save-default nil)
      (super-save-mode 38))

#+END_SRC

** Read Documentation for Developers
   I am use [[https://github.com/astoff/devdocs.el][devdocs]] for see documentation from [[https://devdocs.io][DevDocs]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package devdocs
      :ensure t
      :hook (python-mode . (lambda ()
                                (setq-local devdocs-current-docs
                                            '("python~3.9"))))
      )

#+END_SRC

** Pomidor
   For pomidor I am use [[https://github.com/TatriX/pomidor][pomidor]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package pomidor
      :ensure t
      :bind (("<f12>" . pomidor))
      :custom
      (pomidor-sound-tick . nil)
      (pomidor-sound-tack . nil)
      :hook
      (pomidor-mode . (lambda ()
                          (display-line-numbers-mode -1)
                          (setq left-fringe-width 0 right-fringe-width 0)
                          (setq left-margin-width 2 right-margin-width 0)
                          (set-window-buffer nil (current-buffer)))))

#+END_SRC

** Pacman
   I am use [[https://github.com/semenInRussia?tab=stars][pacmacs]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package pacmacs
      :ensure t
      :init
      (defun fast-exec-define-pacmacs-keys ()
          "Bind `fast-exec' and `pacmacs'."
          (fast-exec/some-commands
           ("Play to Pacmacs" 'pacmacs-start))
          )
      (fast-exec/register-keymap-func 'fast-exec-define-pacmacs-keys)
      (fast-exec/reload-functions-chain))

#+END_SRC


** Wikipedia
   I am use [[https://github.com/emacs-helm/helm-wikipedia][helm-wikipedia]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-wikipedia
      :ensure t)

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-spotify-plus
      :ensure t)

#+END_SRC

** View Github Stars
   I am use [[https://github.com/Sliim/helm-github-stars][helm-github-stars]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-github-stars
      :ensure t
      :custom
      (helm-github-stars-username "semeninrussia")
      :init
      (defun fast-exec-define-helm-github-stars ()
          "Bind `helm-github-stars' and `fast-exec'."
          (fast-exec/some-commands
           ("View Github Stars" 'helm-github-stars-fetch)))
      (fast-exec/register-keymap-func 'fast-exec-define-helm-github-stars)
      (fast-exec/reload-functions-chain))

#+END_SRC

** Easy Generate .gitignore
   I am use [[https://github.com/jupl/helm-gitignore][helm-gitignore]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  ;; (use-package helm-gitignore
  ;;     :ensure t
  ;;     :init
  ;;     (defun fast-exec-define-helm-gitignore-keys ()
  ;;         "Bind `fast-exec' and `helm-gitignore'."
  ;;         (fast-exec/some-commands
  ;;          ("Generate Gitignore" 'helm-gitignore)))
  ;;     (fast-exec/register-keymap-func 'fast-exec-define-helm-gitignore-keys)
  ;;     (fast-exec/reload-functions-chain)))

#+END_SRC

** Google
   I am use [[https://github.com/cwhatley/helm-google][helm-google]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-google
      :ensure t
      :init
      (defun fast-exec-helm-google-define-keys ()
          "Keymaps for `helm-google' and `fast-exec'."
          (fast-exec/some-commands
           ("Search in Google" 'helm-google)))
      (fast-exec/register-keymap-func 'fast-exec-helm-google-define-keys)
      (fast-exec/reload-functions-chain))

#+END_SRC

* Graphic User Interface
** Hide ALL
   This is standard stuf

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode   -1)

  (toggle-frame-fullscreen)
#+END_SRC

** Color Theme
   I am use [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (require 'gruber-darker-theme)

  (use-package gruber-darker-theme
      :ensure t
      :init
      (load-theme 'gruber-darker t)
      )

#+END_SRC

** Numbers of lines
*** Vars 
    Var `dont-display-lines-mode` is list of modes,
for this modes willn't display numbers of lines. Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq dont-display-lines-modes
        '(org-mode
          term-mode
          shell-mode
          treemacs-mode
          eshell-mode
          helm-mode))

#+END_SRC

*** Enable and Disable
    I am display numbers of lines in each mode, excluding modes from
`dont-display-lines-mode` list:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun display-or-not-display-numbers-of-lines ()
      "Display numbers of lines OR don't display numbers of lines.
  If current `major-mode` need to display numbers of lines, then display
  numbers of lines, otherwise don't display."
      (interactive)
      (if (-contains? dont-display-lines-modes major-mode)
          (display-line-numbers-mode 0)
          (display-line-numbers-mode 38))
      )

  (add-hook 'prog-mode-hook 'display-or-not-display-numbers-of-lines)
#+END_SRC

** Modeline
I am use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package doom-modeline
      :ensure t
      :custom
      (doom-modeline-icon nil)
      (doom-modeline-modal-icon nil)
      (doom-modeline-buffer-file-name-style 'auto)
      (doom-modeline-workspace-name nil)
      (doom-modeline-project-detection 'projectile)
      (doom-modeline-buffer-enconding 'projectile)
      (doom-modeline-enable-word-count t)
      (doom-modeline-height 24)
      :init
      (display-time-mode t)
      (column-number-mode)
      :config
      (doom-modeline-mode 0)
      (doom-modeline-mode 38))

#+END_SRC

** Fonts

   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (set-face-attribute 'default nil :font "Consolas" :height 250)
  (set-frame-font "Consolas" nil t)

#+END_SRC

#+RESULTS:

** Folding
   I am use [[https://github.com/gregsexton/origami.el][origami]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package origami
      :ensure t
      :bind (:map xah-fly-command-map
                  ("SPC ]" . origami-open-node)
                  ("SPC [" . origami-close-node)
                  ("SPC SPC ]" . origami-open-all-nodes)
                  ("SPC SPC [" . origami-close-all-nodes))
      :hook (org-mode-hook . origami-mode)
      :config
      (global-origami-mode 38))

#+END_SRC

** Highlight Current Line

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

(global-hl-line-mode 1)

#+END_SRC

** Centering

I

** View Break Page Lines
   I am use [[https://github.com/purcell/page-break-lines][page-break-lines]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package page-break-lines
      :ensure t
      :init
      (global-page-break-lines-mode 38))

#+END_SRC

* Developer Environment
** Projects Management
   I am use [[https://github.com/bbatsov/projectile][projectile]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (defun get-project-name (project-root)
      "Return name of project by path - `PROJECT-ROOT`."
      (s-titleize (f-dirname project-root)))

  (require 'projectile)
  (setq projectile-project-search-path '("~/projects/"))
  (setq projectile-completion-system 'helm)
  (setq projectile-project-name-function 'get-project-name)

  (global-set-key (kbd "S-<f5>") 'projectile-test-project)
  (global-set-key (kbd "<f5>") 'projectile-run-project)

  (projectile-mode 1)

#+END_SRC
*** Projectile with Helm
    I am use offical [[https://github.com/bbatsov/helm-projectile][helm-projectile]] I am press =SPC j= and find file in current project:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package helm-projectile
      :ensure t
      :bind (:map xah-fly-command-map
                  ("SPC j" . 'helm-projectile-find-file)))

#+END_SRC

** Regexp IDE
   I am use [[https://github.com/jwiegley/regex-tool][regex-tool]] for testing regexp in Emacs

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package regex-tool
      :ensure t
      :init
      (add-hook 'regex-tool-mode-hook (lambda () (toggle-frame-maximized))))

#+END_SRC

** Git
   I am use super famous [[https://github.com/magit/magit][magit]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (use-package magit :ensure t)

#+END_SRC

*** Fly View Authors of Changes
    For this I am use [[https://github.com/Artawower/blamer.el][blamer]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package blamer
      :ensure t
      :defer 20
      :custom
      (blamer-idle-time 0.3)
      (blamer-min-offset 70)
      :custom-face
      (blamer-face ((t :foreground "#7a88cf"
                       :background nil
                       :height 140
                       :italic t)))
      )

#+END_SRC

** View Directories
   I am use inline in Emacs [[https://www.emacswiki.org/emacs/DiredMode][dired]]. And for minimalize design of dired,
I am use [[https://github.com/emacsmirror/dired-details][dired-detail]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))

#+END_SRC
** Run Command
   I am use [[https://github.com/bard/emacs-run-command][run-command]] for run special commands for special files:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package run-command
      :ensure t
      :bind (:map xah-fly-command-map
                  ("SPC , c" . run-command)))

#+END_SRC
*** Recipes
    I am use [[https://github.com/semenInRussia/emacs-run-command-recipes/][run-command-recipes]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package run-command-recipes
      :ensure t
      :after (run-command)
      :init
      (run-command-recipes-use-all))

#+END_SRC
** Skeletor
   I am use [[https://github.com/chrisbarrett/skeletor.el][skeletor]] for creating new projects by temlate:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package skeletor
      :ensure t
      :custom
      (skeletor-project-directory "~/projects")
      (skeletor-completing-read-function completing-read-function))

#+END_SRC
* Auto Tangle This File

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (defun if-Emacs-org-then-org-babel-tangle ()
      "If current open file is Emacs.org, then `org-babel-tangle`."
      (interactive)

      (when (s-equals? (f-filename buffer-file-name) "Emacs.org")
          (org-babel-tangle)))

  (add-hook 'after-save-hook 'if-Emacs-org-then-org-babel-tangle)
#+END_SRC

