#+TITLE: Config of Emacs from semenInRussia
#+AUTHOR: semenInRussia

* Hi!
  Hello, This is configuration of Emacs from semenInRussia!
  I create this configuration with help of [[https://github.com/daviwil/emacs-from-scratch/][this cool repo]].
  
  My moto is "Good Luck!", so my homepage is "Good Luck":

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq initial-buffer-choice "~/Start.org")
  
#+END_SRC

* Package Management - base 
** use-package
   I am use [[https://github.com/jwiegley/use-package][use-package]]:
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (require 'package)

 (setq package-archives 
   '(("melpa-stable" . "http://stable.melpa.org/packages/")
     ("melpa"        . "https://melpa.org/packages/")
     ("org"          . "https://orgmode.org/elpa/")
     ("elpa"         . "https://elpa.gnu.org/packages/")))

 (package-initialize)
 (unless package-archive-contents
 (package-refresh-contents))
 
 (unless (package-installed-p 'use-package)
 (package-install 'use-package))

 (require 'use-package)
 #+END_SRC

 #+RESULTS:
 : use-package
 
** Packages Not in MELPA/ELPA/ORG-ELPA
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (add-to-list 'load-path "~/.emacs.d/lisp")
#+END_SRC

* Emacs Lisp
I am use some packages for simple develop on Emacs Lisp
** Libraries
*** s
    This is [[https://github.com/magnars/s.el][s]]:
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (use-package s :ensure t)
 #+END_SRC
*** f
    This is [[https://github.com/rejeep/f.el][f]]:
 #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
 (use-package f)
 #+END_SRC

*** Dash
    This is [[https://github.com/magnars/dash.el][dash:]]
 #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
 (use-package dash)
 #+END_SRC

* Info about me for Emacs

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(setq user-full-name    "Semen Khramtsov"
      user-mail-address "hrams205@gmail.com"
      user-birthday     "2007-01-29")
#+END_SRC

** Congurlation me with my Birthday!

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (if (s-equals? (format-time-string "%Y-%m-%d") user-birthday)
      (animate-birthday-present))
#+END_SRC

* Organize Editing
** Snippets
   I am use [[https://github.com/joaotavora/yasnippet][yasnippet]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package yasnippet
   :ensure t
   :init
   (yas-global-mode 1)
   :config
   (setq yas-snippet-dirs '("~/.emacs.d/snippets")))

(use-package yasnippet-snippets
    :ensure t
    :config
    (yasnippet-snippets-initialize))
#+END_SRC

And [[https://github.com/emacsmirror/yasnippet-classic-snippets][yasnippet-classic-snippets]] for basic snippets' collection:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package yasnippet-classic-snippets :ensure t)
#+END_SRC

** Linters
   I am use [[https://www.flycheck.org/en/latest/][flycheck]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package flycheck
    :config (global-flycheck-mode 1))
#+END_SRC

** Search
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (setq search-highlight        t)
   (setq query-replace-highlight t)
#+END_SRC

** Autocomplete
   I am use [[http://company-mode.github.io][company-mode]], I am set delay beetween typing text and viewing hints to
0.8 seconds:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (use-package company
       :ensure t
       :init
       (setq company-async-wait 0.8)
       :config
       (global-company-mode))
#+END_SRC

** Main keymaps
   I am use [[https://github.com/xahlee/xah-fly-keys][xah-fly-keys]], this as VIM:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (require 'xah-fly-keys)

  (xah-fly-keys-set-layout "qwerty")
  (xah-fly-keys 1)

  (define-key xah-fly-command-map (kbd "SPC l") nil)
  (define-key xah-fly-command-map (kbd "SPC j") nil)
#+END_SRC

** Multiple Cursors
   I am use package of magnars [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(defun if-selected-then-next-word-like-this (arg)
    (interactive "p")
    (when (use-region-p)
        (mc/mark-next-like-this arg)))

(use-package multiple-cursors
    :ensure t
    :bind (("<tab>" . if-selected-then-next-word-like-this)))

#+END_SRC

** Very Fast Jump
   I am use [[https://github.com/abo-abo/avy][avy]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package avy
    :ensure t
    :bind
    ((:map xah-fly-command-map)
     ("SPC '" . avy-goto-char)))
#+END_SRC

** Smart Insert Parens
*** Smartparens
   I am use [[https://github.com/Fuco1/smartparens/][smartparens]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package smartparens
    :ensure t
    :config (smartparens-global-mode))
#+END_SRC

*** Delete Only Parens without Inner Contents
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun delete-only-1-char ()
    "Delete only 1 character before point."
    (interactive)
    (backward-char)
    (delete-char 1)
    )

(define-key xah-fly-command-map (kbd "DEL") 'delete-only-1-char)
#+END_SRC

** Smart Select Text
   I am use cool package [[https://github.com/magnars/expand-region.el/][expand-region]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package expand-region
    :ensure t
    :bind
    (:map xah-fly-command-map
    ("1" . er/expand-region)))
#+END_SRC
** Macros
   I am use =\= in command mode for start of record macro.
   I am also use === for execute last macro or execute macro to lines:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun kmacro-start-or-end-macro ()
    "If macro record have just started, then stop this record, otherwise start macro record."
    (interactive)
    (if defining-kbd-macro
        (kmacro-end-macro 1)
        (kmacro-start-macro 1)))

(define-key xah-fly-command-map (kbd "\\") 'kmacro-start-or-end-macro)

(defun kmacro-call-macro-or-apply-to-lines (arg &optional top bottom)
    "If selected region, then apply last macro to selected lines, otherwise call last macro."
    (interactive 
     (list
      1
      (if (use-region-p) region-beginning nil)
      (if (use-region-p) region-end nil)))

    (if (use-region-p)
        (apply-macro-to-region-lines top bottom)
        (kmacro-call-macro arg)))

(define-key xah-fly-command-map (kbd "=") 'kmacro-call-macro-or-apply-to-lines)
#+END_SRC

** Custom Deleting Text
   I am delete this line and edit this by press =w=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun delete-and-edit-current-line ()
    "Delete current line and instroduce to insert mode."
    (interactive)
    (beginning-of-line-text)
    (kill-line)
    (xah-fly-insert-mode-init)
    )

(define-key xah-fly-command-map (kbd "w") 'delete-and-edit-current-line)
#+END_SRC

** Custom Selecting Text
   I am press 2 times =8= for selecting 2 words

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun select-current-or-next-word ()
    "If word was selected, then select next word, otherwise select current word."
    (interactive)
    (if (use-region-p)
        (forward-word)
        (xah-extend-selection))
    )

(define-key xah-fly-command-map (kbd "8") 'select-current-or-next-word)
#+END_SRC
** Indent Settings
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width          4)
  (setq-default c-basic-offset     4)
  (setq-default standart-indent    4)
  (setq-default lisp-body-indent   4)

  (global-set-key (kbd "RET") 'newline-and-indent)
  (setq lisp-indent-function  'common-lisp-indent-function)
#+END_SRC
** Custom Editing Text
   I am use =s= for inserting new line:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun open-line-saving-indent ()
      "Inserting new line, saving position and inserting new line."
      (interactive)
      (newline-and-indent)
      (forward-line -1)
      (end-of-line)
      )

  (define-key xah-fly-command-map (kbd "s") 'open-line-saving-indent)

#+END_SRC

And I am press =p= for inserting space, and if I am selected region,  for inserting space
to beginning of each line:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun insert-space-before-line ()
      "Saving position, insert space to beginning of current line."
      (interactive)
      (save-excursion (beginning-of-line-text)
                      (xah-insert-space-before))
      )

  (defun insert-spaces-before-each-line-by-line-nums (start-line end-line)
      "Insert space before each line in region (`START-LINE`; `END-LINE`)."
      (unless (= 0 (- end-line start-line))
          (goto-line start-line)
          (insert-space-before-line)
          (insert-spaces-before-each-line-by-line-nums (+ start-line 1) end-line))
      )

  (defun insert-spaces-before-each-line (beg end)
      "Insert spaces before each selected line, selected line indentifier with `BEG` & `END`."
      (interactive "r")
      (save-excursion
          (let (deactivate-mark)
              (let ((begining-line-num (line-number-at-pos beg))
                    (end-line-num (line-number-at-pos end)))
                  (insert-spaces-before-each-line-by-line-nums begining-line-num end-line-num))))
      )

  (defun insert-spaces-before-or-to-beginning-of-each-line (beg end)
      "Insert space, and if selected region, insert space to beginning of each line, text is should will indentifier with `BEG` & `END`."
      (interactive (list (if (use-region-p) (region-beginning))
                         (if (use-region-p) (region-end))))
      (if (use-region-p)
          (insert-spaces-before-each-line beg end)
          (xah-insert-space-before))
      )


  (define-key xah-fly-command-map (kbd "p") nil)
  (define-key xah-fly-command-map (kbd "p") 'insert-spaces-before-or-to-beginning-of-each-line)

#+END_SRC

* Support of Languages
** Functions for extending functional of language
   Function `add-nav-forward-block-keymap-for-language` defines key for 
`forward-block`.
   And function `add-nav-backward-keymap-for-language` define key for
`backward-block`.

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defmacro add-nav-forward-block-keymap-for-language (language forward-block-function)
      "Bind `FORWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC l")
                    ',forward-block-function)))))

  (defmacro add-nav-backward-block-keymap-for-language (language backward-block-function)
      "Bind `BACKWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (message "%s" language-hook)
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC j")
                    ',backward-block-function)))))

#+END_SRC

** Supported Languages
*** LaTeX
**** Vars
     Variable `latex-documentclasses` is list of documentclasses in Emacs, each element
 of this list is name of documentclass in lower case. Defaults to:
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (setq latex-documentclasses 
     '("article" "reoport" "book" "proc" "minimal" "slides" "memoir" "letter" "beamer"))
 #+END_SRC
 Variable `latex-environment-names` is list of words which valid to `\begin` and `\end` 
 environments. Defaults to:

 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
     (setq latex-environment-names
       '( "figure"
          "table"
          "description"
          "enumerate"
          "itemize"
          "list"
          "math"
          "displaymath"
          "split"
          "array"
          "eqnarray"
          "equation"
          "theorem"
          "matrix"
          "cases"
          "align"
          "center"
          "flushleft"
          "flushright"
          "minipage"
          "quotation"
          "quote"
          "verbatim" 
          "verse"
          "tabbing"
          "tabular"
          "thebibliography" 
          "titlepage"
          "document"))

   ;; If this information is not actual, then here my python script and add `document`, 
   ;; so all claims to this site https://latex.wikia.org/wiki/List_of_LaTeX_environments:
  
   ;; import requests
   ;; from bs4 import BeautifulSoup as Soup


   ;; url = "https://latex.wikia.org/wiki/List_of_LaTeX_environments"

   ;; def main():
   ;;     request = requests.get(url)
   ;;     soup = Soup(request.text, "html.parser")
   ;;     elements = soup.select("h3 > span.mw-headline")
   ;;     elements = list(filter(lambda el: "environment" in el.text, elements))
   ;;     codes = list(map(lambda el: el.text.split()[0].lower(), elements))
   ;;     print(codes)


 #+END_SRC
*** Python

**** Linters
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq flycheck-python-pylint-executable "pylint")
  (setq flycheck-python-flake8-executable "flake8")
  (setq flycheck-python-mypy-executable "mypy")

#+END_SRC

* Org Mode
  I am use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] for centering content of org file:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun org-mode-visual-fill ()
  (interactive)
  (setq visual-fill-column-width 90
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :ensure t
  :hook (org-mode . org-mode-visual-fill))
#+END_SRC

** Navigation
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun org-forward-heading ()
      "Forward heading in `org-mode`."
      (interactive)
      (let ((old-point (point)))
          (org-forward-heading-same-level 1)
          (if (= (point) old-point)
              (org-forward-element)))
      )

  (defun org-backward-heading ()
      "Backward heading in `org-mode`."
      (interactive)
      (let ((old-point (point)))
          (org-backward-heading-same-level 1)
          (if (= (point) old-point)
              (org-backward-element)))
      )

  (add-nav-forward-block-keymap-for-language org-mode org-forward-heading)
  (add-nav-backward-block-keymap-for-language org-mode org-backward-heading)

#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (define-key xah-fly-command-map (kbd SPC j) 'org-backward-heading)) | (lambda nil (define-key xah-fly-command-map (kbd SPC l) 'org-forward-heading)) | org-mode-visual-fill |

* Small Organize Tricks
** Very Small Tricks

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (show-paren-mode 2)
  (setq make-backup-files         nil)
  (setq auto-save-list-file-name  nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Truncate Lines
   I am truncate lines in `prog-mode`-s, excluding `org-mode`:
*** Vars
    Var `dont-truncate-lines-modes` is list of modes for this modes, emacs want disable truncate words. Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(setq dont-truncate-lines-modes '(org-mode))
#+END_SRC

*** Disable and Enable
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun truncate-or-not-truncate-words ()
      "Truncate words or don't truncate words.
  If current `major-mode` don't need to truncate words, then don't truncate words,
  otherwise truncate words."
      (interactive)
      (if (-contains? dont-truncate-lines-modes major-mode)
          (toggle-truncate-lines 0)
          (toggle-truncate-lines 38)))

  (add-hook 'prog-mode-hook 'truncate-or-not-truncate-words)
#+END_SRC

** Helpful
*** Which Key?
    I am use [[https://github.com/justbur/emacs-which-key][which-key]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package which-key
    :ensure t
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
** Framework for Incremental Completions and Narrowing Selections 
   I am use [[https://github.com/emacs-helm/helm][HELM]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (use-package helm
    :ensure t
    :config
    (setq-default helm-M-x-fuzzy-match t)
    :init
    (helm-mode 1)
    :bind
    ("C-o" . helm-find-files))
#+END_SRC
** Translate
   I am use [[https://github.com/atykhonov/google-translate][google-translate]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package google-translate
      :ensure t
      :bind
      (:map xah-fly-command-map
            ("SPC \\" . google-translate-at-point)))

  (defun google-translate--search-tkk ()
    "Search TKK. From https://github.com/atykhonov/google-translate/issues/137.
  Thank you https://github.com/leuven65!"
    (list 430675 2721866130))

#+END_SRC

* Graphic User Interface
** Hide ALL
   This is standard stuf

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode   -1)

  (toggle-frame-fullscreen)
#+END_SRC

** Color Theme
   I am use [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package doom-themes 
    :ensure t
    :config
    (load-theme 'doom-1337 t))
#+END_SRC

** Numbers of lines
*** Vars 
    Var `dont-display-lines-mode` is list of modes,
for this modes willn't display numbers of lines. Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(setq dont-display-lines-modes
   '(org-mode
     term-mode
     shell-mode
     treemacs-mode
     eshell-mode
     helm-mode))
#+END_SRC

*** Enable and Disable
    I am display numbers of lines in each mode, excluding modes from
`dont-display-lines-mode` list:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun display-or-not-display-numbers-of-lines ()
      "Display numbers of lines OR don't display numbers of lines.
  If current `major-mode` need to display numbers of lines, then display
  numbers of lines, otherwise don't display."
      (interactive)
      (if (-contains? dont-display-lines-modes major-mode)
          (display-line-numbers-mode 0)
          (display-line-numbers-mode 38))
      )

  (add-hook 'prog-mode-hook 'display-or-not-display-numbers-of-lines)
#+END_SRC

** Modeline
I am use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (use-package doom-modeline
     :ensure t
     :config
     (display-time-mode t)
     (setq doom-modeline-icon nil)
     (setq doom-modeline-workspace-name nil)
     :init
     (doom-modeline-mode 1))
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (set-face-attribute 'default nil :font "Consolas" :height 200)
   (set-frame-font "Consolas" nil t)
#+END_SRC

** Highlight Current Line

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(hl-line-mode 1)
#+END_SRC

* Developer Environment
** Projects Management
   I am use [[https://github.com/bbatsov/projectile][projectile]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (defun get-project-name (project-root)
      "Return name of project by path - `PROJECT-ROOT`."
      (s-titleize (f-dirname project-root)))

  (require 'projectile)
  (setq projectile-project-search-path '("~/projects/"))
  (setq projectile-completion-system 'helm)
  (setq projectile-project-name-function 'get-project-name)

  (global-set-key (kbd "S-<f5>") 'projectile-test-project)

  (projectile-mode 1)
  
#+END_SRC

** Git
   I am use super famous [[https://github.com/magit/magit][magit]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package magit :ensure t)
#+END_SRC
** View Directories
   I am use inline in Emacs [[https://www.emacswiki.org/emacs/DiredMode][dired]]. And for minimalize design of dired,
I am use [[https://github.com/emacsmirror/dired-details][dired-detail]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))

#+END_SRC

* Auto Tangle This File
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (defun if-Emacs-org-then-org-babel-tangle ()
      "If current open file is Emacs.org, then `org-babel-tangle`."
      (interactive)

      (when (s-equals? (f-filename buffer-file-name) "Emacs.org")
          (org-babel-tangle)))

  (add-hook 'after-save-hook 'if-Emacs-org-then-org-babel-tangle)
#+END_SRC

