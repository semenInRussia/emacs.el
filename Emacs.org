#+TITLE: Config of Emacs from semenInRussia
#+AUTHOR: semenInRussia

* Hi!
  Hello, This is configuration of Emacs from semenInRussia!
  I create this configuration with help of [[https://github.com/daviwil/emacs-from-scratch/][this cool repo]].
  
  My moto is "Good Luck!", so my homepage is "Good Luck":

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq initial-buffer-choice "~/Start.org")

#+END_SRC

* Package Management - base 
** use-package
   I am use [[https://github.com/jwiegley/use-package][use-package]]:
   
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (require 'package)

 (setq package-archives
   '(("melpa-stable" . "http://stable.melpa.org/packages/")
     ("melpa"        . "https://melpa.org/packages/")
     ("org"          . "https://orgmode.org/elpa/")
     ("elpa"         . "https://elpa.gnu.org/packages/")))

 (package-initialize)
 (unless package-archive-contents
 (package-refresh-contents))

 (unless (package-installed-p 'use-package)
 (package-install 'use-package))

 (require 'use-package)
 #+END_SRC

** Packages Not in MELPA/ELPA/ORG-ELPA
*** Stranger Packages

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

    (add-to-list 'load-path "~/.emacs.d/lisp")

#+END_SRC

*** My Packages

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-to-list 'load-path "~/projects/fast-exec")

#+END_SRC

* Emacs Lisp
I am use some packages for simple develop on Emacs Lisp
** Libraries
*** s
    This is [[https://github.com/magnars/s.el][s]]:
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (use-package s)
 #+END_SRC
 
*** f
    This is [[https://github.com/rejeep/f.el][f]]:
    
 #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
 (use-package f)
 #+END_SRC
 
*** Dash
    This is [[https://github.com/magnars/dash.el][dash:]]
 #+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
 (use-package dash)
 #+END_SRC

* Info about me for Emacs

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq user-full-name    "Semen Khramtsov"
        user-mail-address "hrams205@gmail.com"
        user-birthday     "2007-01-29"
        user-name         "semenInRussia"
        user-os           "Windows" ; "Windows" or "Linux"
        )


  (defun user-os-windows-p ()
      "If user have os Windows, then return t.
  Info take from var `user-os`, user must set it."
      (interactive)
      (s-equals? user-os "Windows")
      )

#+END_SRC

** Congurlation me with my Birthday!

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (if (s-equals? (format-time-string "%Y-%m-%d") user-birthday)
      (animate-birthday-present))
      
#+END_SRC

* Organize Editing
** Snippets
   I am use [[https://github.com/joaotavora/yasnippet][yasnippet]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package yasnippet
   :ensure t
   :init
   (yas-global-mode 1)
   :config
   (setq yas-snippet-dirs '("~/.emacs.d/snippets")))

(use-package yasnippet-snippets
    :ensure t
    :config
    (yasnippet-snippets-initialize))
#+END_SRC

And [[https://github.com/emacsmirror/yasnippet-classic-snippets][yasnippet-classic-snippets]] for basic snippets' collection:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package yasnippet-classic-snippets :ensure t)
#+END_SRC

** Linters
   I am use [[https://www.flycheck.org/en/latest/][flycheck]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package flycheck
    :config (global-flycheck-mode 1))
#+END_SRC

** Search
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (setq search-highlight        t)
   (setq query-replace-highlight t)
#+END_SRC

** Autocomplete
   I am use [[http://company-mode.github.io][company-mode]], I am set delay beetween typing text and viewing hints to
0.8 seconds:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (use-package company
       :ensure t
       :init
       (setq company-async-wait 0.8)
       :config
       (global-company-mode))
#+END_SRC

And for =yasnippet= I am use code from [[https://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names][this]] stackexchange:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
          (append (if (consp backend) backend (list backend))
                  '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

#+END_SRC

** Main keymaps
   I am use [[https://github.com/xahlee/xah-fly-keys][xah-fly-keys]], this as VIM:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (require 'xah-fly-keys)

  (xah-fly-keys-set-layout "qwerty")
  (xah-fly-keys 1)

  (define-key xah-fly-command-map (kbd "SPC l") nil)
  (define-key xah-fly-command-map (kbd "SPC j") nil)
#+END_SRC

** View Functions/Classes/etc.
   I am use ido with keymap =SPC SPC SPC=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq imenu-auto-rescan t)
  (define-key xah-fly-command-map (kbd "SPC SPC") nil)
  (define-key xah-fly-command-map (kbd "SPC SPC SPC") 'imenu)

#+END_SRC

** Multiple Cursors
   I am use package of magnars [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(defun if-selected-then-next-word-like-this (arg)
    (interactive "p")
    (when (use-region-p)
        (mc/mark-next-like-this arg)))

(use-package multiple-cursors
    :ensure t
    :bind (("<tab>" . if-selected-then-next-word-like-this)))

#+END_SRC

** Very Fast Jump
   I am use [[https://github.com/abo-abo/avy][avy]]:
   
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package avy
    :ensure t
    :bind
    ((:map xah-fly-command-map)
     ("'" . avy-goto-char)))
#+END_SRC

** Smart Parens
*** Smartparens
   I am use [[https://github.com/Fuco1/smartparens/][smartparens]], for slurp expresion I am use =]=, also for splice parens I am
use =-=, for navigating I am use `.` and `m`:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (use-package smartparens
      :ensure t
      :init (smartparens-global-mode 1)
      :bind (:map xah-fly-command-map
                   ("]" . sp-forward-slurp-sexp)
                   ("-" . sp-splice-sexp)
                   ("m" . sp-backward-sexp)
                   ("." . sp-forward-sexp)))

#+END_SRC

*** Delete Only Parens without Inner Contents

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun delete-only-1-char ()
    "Delete only 1 character before point."
    (interactive)
    (backward-char)
    (delete-char 1)
    )

(define-key xah-fly-command-map (kbd "DEL") 'delete-only-1-char)
#+END_SRC

** Smart Select Text
   I am use cool package [[https://github.com/magnars/expand-region.el/][expand-region]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package expand-region
    :ensure t
    :bind
    (:map xah-fly-command-map
    ("1" . er/expand-region)))
#+END_SRC
** Macros
   I am use =\= in command mode for start of record macro.
   I am also use =SPC RET= for execute last macro or execute macro to lines:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun kmacro-start-or-end-macro ()
      "If macro record have just started, then stop this record, otherwise start."
      (interactive)
      (if defining-kbd-macro
          (kmacro-end-macro 1)
          (kmacro-start-macro 1)))

  (define-key xah-fly-command-map (kbd "\\") 'kmacro-start-or-end-macro)

  (defun kmacro-call-macro-or-apply-to-lines (arg &optional top bottom)
   "If selected region, then apply macro to selected lines, otherwise call macro."
      (interactive
       (list
        1
        (if (use-region-p) (region-beginning) nil)
        (if (use-region-p) (region-end) nil)))

      (if (use-region-p)
          (apply-macro-to-region-lines top bottom)
          (kmacro-call-macro arg)))

  (define-key xah-fly-command-map (kbd "SPC RET") 'kmacro-call-macro-or-apply-to-lines)

#+END_SRC

#+RESULTS:
: kmacro-call-macro-or-apply-to-lines

** Custom Deleting Text
   I am delete this line and edit this by press =w=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun delete-and-edit-current-line ()
      "Delete current line and instroduce to insert mode."
      (interactive)
      (beginning-of-line-text)
      (kill-line)
      (xah-fly-insert-mode-init)
      )

  (define-key xah-fly-command-map (kbd "w") 'delete-and-edit-current-line)

#+END_SRC

    I am delete content of this line (including whitespaces) on press =SPC w=:
    
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun clear-current-line ()
      "Clear content of current line (including whitespaces)."
      (interactive)
      (kill-region (line-beginning-position) (line-end-position))
      )

  (define-key xah-fly-command-map (kbd "SPC w") 'clear-current-line)
#+END_SRC

** Custom Selecting Text
   I am press 2 times =8= for selecting 2 words

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(defun select-current-or-next-word ()
    "If word was selected, then select next word, otherwise select current word."
    (interactive)
    (if (use-region-p)
        (forward-word)
        (xah-extend-selection))
    )

(define-key xah-fly-command-map (kbd "8") 'select-current-or-next-word)
#+END_SRC

    I am press =g=, for deleting current block, but if selected region, then I am cancel 
this select:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun delete-current-text-block-or-cancel-selection ()
      "If text is selected, then cancel selection, otherwise delete current block."
      (interactive)
      (if (use-region-p)
          (deactivate-mark)
          (xah-delete-current-text-block)))

  (define-key xah-fly-command-map (kbd "g") nil)
  (define-key xah-fly-command-map (kbd "g") 'delete-current-text-block-or-cancel-selection)

#+END_SRC

** Custom Editing Text
   I am use =s= for inserting new line:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun open-line-saving-indent ()
      "Inserting new line, saving position and inserting new line."
      (interactive)
      (newline-and-indent)
      (forward-line -1)
      (end-of-line)
      )

  (define-key xah-fly-command-map (kbd "s") 'open-line-saving-indent)

#+END_SRC

And I am press =p= for inserting space, and if I am selected region,  for inserting space
to beginning of each line:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun insert-space-before-line ()
      "Saving position, insert space to beginning of current line."
       (interactive)
       (save-excursion (beginning-of-line-text)
                      (xah-insert-space-before))
      )

  (defun insert-spaces-before-each-line-by-line-nums (start-line end-line)
      "Insert space before each line in region (`START-LINE`; `END-LINE`)."
      (unless (= 0 (+ 1 (- end-line start-line)))
          (goto-line start-line)
          (insert-space-before-line)
          (insert-spaces-before-each-line-by-line-nums (+ start-line 1) end-line))
      )

  (defun insert-spaces-before-each-line (beg end)
      "Insert spaces before each selected line, selected line indentifier with `BEG` & `END`."
      (interactive "r")
      (save-excursion
          (let (deactivate-mark)
              (let ((begining-line-num (line-number-at-pos beg))
                    (end-line-num (line-number-at-pos end)))
                  (insert-spaces-before-each-line-by-line-nums begining-line-num end-line-num))))
      )

  (defun insert-spaces-before-or-to-beginning-of-each-line (beg end)
      "Insert space, and if selected region, insert space to beginning of each line, text is should will indentifier with `BEG` & `END`."
      (interactive (list (if (use-region-p) (region-beginning))
                         (if (use-region-p) (region-end))))
      (if (use-region-p)
          (insert-spaces-before-each-line beg end)
          (xah-insert-space-before))
      )


  (define-key xah-fly-command-map (kbd "p") nil)
  (define-key xah-fly-command-map (kbd "p") 'insert-spaces-before-or-to-beginning-of-each-line)

#+END_SRC

** Indent Settings
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq-default indent-tabs-mode nil)
  (setq-default tab-width          4)
  (setq-default c-basic-offset     4)
  (setq-default standart-indent    4)
  (setq-default lisp-body-indent   4)


  (defun select-current-line ()
      "Select as region current line."
      (interactive)
      (forward-line 0)
      (set-mark (point))
      (end-of-line)
      )


  (defun indent-line-or-region ()
      "If text selected, then indent it, otherwise indent current line."
      (interactive)
      (save-excursion
          (unless (use-region-p)
              (select-current-line)
              )
          (indent-region (region-beginning) (region-end))))


  (global-set-key (kbd "RET") 'newline-and-indent)
  (define-key xah-fly-command-map (kbd "[") 'indent-line-or-region)

  (setq lisp-indent-function  'common-lisp-indent-function)

#+END_SRC
* Support of Languages
** Functions for extending functional of language
*** Functions for Navigating
   Function `add-nav-forward-block-keymap-for-language` defines key for 
`forward-block`.
   And function `add-nav-backward-block-keymap-for-language` define key for
`backward-block`.

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defmacro add-nav-forward-block-keymap-for-language (language forward-block-function)
      "Bind `FORWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC l")
                    ',forward-block-function)))))


  (defmacro add-nav-backward-block-keymap-for-language (language backward-block-function)
      "Bind `BACKWARD-BLOCK-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC j")
                    ',backward-block-function)))))

#+END_SRC

Function `add-nav-to-imports-for-language`, is define keys for go to imports:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defmacro add-nav-to-imports-for-language (language to-imports-function)
      "Bind `TO-IMPORTS-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC SPC i")
                    ',to-imports-function)))))

#+END_SRC

*** Functions for Pretty View
  I am use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] for centering content of org file:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package visual-fill-column
      :ensure t)

  (defun visual-fill ()
      (interactive)
      (setq visual-fill-column-width 90
            visual-fill-column-center-text t)
      (visual-fill-column-mode 38))

#+END_SRC
*** Functions for Import
    Function `add-import-keymap-for-language` defines key for `add-import`.

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (define-key xah-fly-command-map (kbd "SPC e") 'xah-fly-c-keymap)

  (defmacro add-import-keymap-for-language (language add-import-function)
      "Bind `ADD-IMPORT-FUNCTION` to `LANGUAGE`-map."
      `(let ((language-hook (intern (s-append "-hook" (symbol-name ',language)))))
           (add-hook
            language-hook
            (lambda ()
                (define-key
                    xah-fly-command-map
                    (kbd "SPC i")
                    ',add-import-function)))))

#+END_SRC

** Supported Languages
*** LaTeX
**** Vars
     Variable `latex-documentclasses` is list of documentclasses in Emacs, each element
 of this list is name of documentclass in lower case. Defaults to:
 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (setq latex-documentclasses 
     '("article" "reoport" "book" "proc" "minimal" "slides" "memoir" "letter" "beamer"))
 #+END_SRC
 Variable `latex-environment-names` is list of words which valid to `\begin` and `\end` 
 environments. Defaults to:

 #+BEGIN_SRC emacs-lisp :tangle ~/init.el
     (setq latex-environment-names
       '( "figure"
          "table"
          "description"
          "enumerate"
          "itemize"
          "list"
          "math"
          "displaymath"
          "split"
          "array"
          "eqnarray"
          "equation"
          "theorem"
          "matrix"
          "cases"
          "align"
          "center"
          "flushleft"
          "flushright"
          "minipage"
          "quotation"
          "quote"
          "verbatim" 
          "verse"
          "tabbing"
          "tabular"
          "thebibliography" 
          "titlepage"
          "document"))

   ;; If this information is not actual, then here my python script and add `document`, 
   ;; so all claims to this site https://latex.wikia.org/wiki/List_of_LaTeX_environments:
  
   ;; import requests
   ;; from bs4 import BeautifulSoup as Soup


   ;; url = "https://latex.wikia.org/wiki/List_of_LaTeX_environments"

   ;; def main():
   ;;     request = requests.get(url)
   ;;     soup = Soup(request.text, "html.parser")
   ;;     elements = soup.select("h3 > span.mw-headline")
   ;;     elements = list(filter(lambda el: "environment" in el.text, elements))
   ;;     codes = list(map(lambda el: el.text.split()[0].lower(), elements))
   ;;     print(codes)


 #+END_SRC
*** Markdown
    I am use [[https://github.com/jrblevin/markdown-mode/][markdown-mode]] , and for its I am centering code:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package markdown-mode
      :ensure t)

  (add-hook 'markdown-mode-hook 'visual-fill)

#+END_SRC

#+RESULTS:

*** Python
**** Navigation

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-nav-forward-block-keymap-for-language
   python-mode
   python-nav-forward-block)

  (add-nav-backward-block-keymap-for-language
   python-mode
   python-nav-backward-block)

#+END_SRC

**** Linters
     
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq flycheck-python-pylint-executable "pylint")
  (setq flycheck-python-flake8-executable "flake8")
  (setq flycheck-python-mypy-executable "mypy")

#+END_SRC

*** Haskell
    I am use [[https://github.com/haskell/haskell-mode][haskell-mode]], and I love =indention-mode=:

 #+BEGIN_SRC emacs-lisp :tangle ~/init.el

   (use-package haskell-mode
       :ensure t
       :hook (haskell-mode . haskell-indent-mode))

   (add-import-keymap-for-language
    haskell-mode
    haskell-add-import)

   (add-nav-to-imports-for-language
    haskell-mode
    haskell-navigate-imports)

   (add-nav-forward-block-keymap-for-language
    haskell-mode
    haskell-ds-forward-decl)

   (add-nav-backward-block-keymap-for-language
    haskell-mode
    haskell-ds-backward-decl)

 #+END_SRC

*** JavaScript (Node.js)
**** Variables
     Variable `js/imports-regexp` if regular expression for search imports in JS. 
Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq js/imports-regexp "import")

#+END_SRC

Variable `js/function-or-class-regexp` if regular expression for search imports in JS. 
Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq js/function-or-class-regexp "function \\|class ")

#+END_SRC

**** Repl
     I am use [[https://github.com/redguardtoo/js-comint][js-comint]] for run my JS' code:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package js-comint
      :ensure t)

  (if (user-os-windows-p)
      (setq js-comint-program-command "C:/Program Files/nodejs/node.exe"))

#+END_SRC

**** Linters
     I am use some packages which you can see on [[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html#summary][this]] page:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package web-mode
      :ensure t)

  (use-package js2-mode
      :ensure t)

  (use-package json-mode
      :ensure t)

  (add-to-list 'auto-mode-alist '("\\.jsx$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

#+END_SRC


**** Navigation

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun js/nav-to-imports ()
      "Navigate to imports in JS mode."
      (interactive)
      (push-mark)
      (let ((old-pos (point)))
          (goto-char (point-min))
          (search-forward-regexp js/imports-regexp old-pos old-pos))
      )

  (add-nav-to-imports-for-language
   js2-mode
   js/nav-to-imports)


  (defun js/nav-forward-function-or-class ()
      "Navigate to next function or class in JS."
      (interactive)
      (search-forward-regexp js/function-or-class-regexp)
      )

  (add-nav-forward-block-keymap-for-language
   js2-mode
   js/nav-forward-function-or-class)

#+END_SRC

* Org Mode
** Navigation
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun org-forward-heading ()
      "Forward heading in `org-mode`."
      (interactive)
      (let ((old-point (point)))
          (org-forward-heading-same-level 1)
          (if (= (point) old-point)
              (org-forward-element)))
      )

  (defun org-backward-heading ()
      "Backward heading in `org-mode`."
      (interactive)
      (let ((old-point (point)))
          (org-backward-heading-same-level 1)
          (if (= (point) old-point)
              (org-backward-element)))
      )

  (add-nav-forward-block-keymap-for-language org-mode org-forward-heading)
  (add-nav-backward-block-keymap-for-language org-mode org-backward-heading)

#+END_SRC
** Centering

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'org-mode-hook 'visual-fill)

#+END_SRC

* Small Organize Tricks
** Very Small Tricks

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (show-paren-mode 2)
  (setq make-backup-files         nil)
  (setq auto-save-list-file-name  nil)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (toggle-truncate-lines 38)

#+END_SRC

** Helpful
*** Which Key?
    I am use [[https://github.com/justbur/emacs-which-key][which-key]]:
#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package which-key
    :ensure t
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
** Framework for Incremental Completions and Narrowing Selections 
   I am use [[https://github.com/emacs-helm/helm][HELM]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
 (use-package helm
    :ensure t
    :config
    (setq-default helm-M-x-fuzzy-match t)
    :init
    (helm-mode 1)
    :bind
    ("C-o" . helm-find-files))
#+END_SRC
** Fast Executing Command
   I am use [[https://github.com/semenInRussia/fast-exec.el][fast-exec]]:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (require 'fast-exec)

  (fast-exec/enable-some-builtin-supports
   yasnippet
   projectile
   magit
   flycheck)
 
  (fast-exec/initialize)
  (define-key xah-fly-command-map (kbd "=") 'fast-exec/exec)

#+END_SRC

** Translate
   I am use [[https://github.com/atykhonov/google-translate][google-translate]]:
   
#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package google-translate
      :ensure t
      :bind
      (:map xah-fly-command-map
            ("SPC \\" . google-translate-at-point)))

  (defun google-translate--search-tkk ()
    "Search TKK. From https://github.com/atykhonov/google-translate/issues/137.
  Thank you https://github.com/leuven65!"
    (list 430675 2721866130))

#+END_SRC

** Command Log
   I am use [[https://github.com/lewang/command-log-mode][command-log-mode]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package command-log-mode
      :ensure t)

#+END_SRC

** Whitespaces Mode
   I am enable whitespaces mode on =prog-mode=:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'prog-mode-hook 'whitespace-mode)

#+END_SRC

** Scratches
   I am press =C-t= for opening scratch:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (defun open-scratch ()
      "Open scratch."
      (interactive)
      (switch-to-buffer "*scratch*")
      )

  (global-set-key (kbd "C-t") 'open-scratch)

#+END_SRC

* Graphic User Interface
** Hide ALL
   This is standard stuf

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode   -1)

  (toggle-frame-fullscreen)
#+END_SRC

** Color Theme
   I am use [[https://github.com/hlissner/emacs-doom-themes][doom-themes]]:
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(use-package doom-themes 
    :ensure t
    :config
    (load-theme 'doom-1337 t))
#+END_SRC

** Numbers of lines
*** Vars 
    Var `dont-display-lines-mode` is list of modes,
for this modes willn't display numbers of lines. Defaults to:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (setq dont-display-lines-modes
        '(org-mode
          term-mode
          shell-mode
          treemacs-mode
          eshell-mode
          helm-mode))

#+END_SRC

*** Enable and Disable
    I am display numbers of lines in each mode, excluding modes from
`dont-display-lines-mode` list:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
  (defun display-or-not-display-numbers-of-lines ()
      "Display numbers of lines OR don't display numbers of lines.
  If current `major-mode` need to display numbers of lines, then display
  numbers of lines, otherwise don't display."
      (interactive)
      (if (-contains? dont-display-lines-modes major-mode)
          (display-line-numbers-mode 0)
          (display-line-numbers-mode 38))
      )

  (add-hook 'prog-mode-hook 'display-or-not-display-numbers-of-lines)
#+END_SRC

** Modeline
I am use [[https://github.com/seagle0128/doom-modeline][doom-modeline]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (use-package doom-modeline
      :ensure t
      :config
      (display-time-mode t)
      (column-number-mode)
      (setq doom-modeline-icon nil)
      (setq doom-modeline-workspace-name nil)
      (setq doom-modeline-project-detection 'projectile)
      (setq doom-modeline-enable-word-count t)
      :init
      (doom-modeline-mode 38))

#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp :tangle ~/init.el
   (set-face-attribute 'default nil :font "Consolas" :height 200)
   (set-frame-font "Consolas" nil t)
#+END_SRC

** Highlight Current Line

#+BEGIN_SRC emacs-lisp :tangle ~/init.el
(hl-line-mode 1)
#+END_SRC

* Developer Environment
** Projects Management
   I am use [[https://github.com/bbatsov/projectile][projectile]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el

  (defun get-project-name (project-root)
      "Return name of project by path - `PROJECT-ROOT`."
      (s-titleize (f-dirname project-root)))

  (require 'projectile)
  (setq projectile-project-search-path '("~/projects/"))
  (setq projectile-completion-system 'helm)
  (setq projectile-project-name-function 'get-project-name)

  (global-set-key (kbd "S-<f5>") 'projectile-test-project)
  (global-set-key (kbd "<f5>") 'projectile-run-project)

  (projectile-mode 1)

#+END_SRC

** Git
   I am use super famous [[https://github.com/magit/magit][magit]]:

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
(use-package magit :ensure t)
#+END_SRC
** View Directories
   I am use inline in Emacs [[https://www.emacswiki.org/emacs/DiredMode][dired]]. And for minimalize design of dired,
I am use [[https://github.com/emacsmirror/dired-details][dired-detail]]:

#+BEGIN_SRC emacs-lisp :tangle ~/init.el

  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))

#+END_SRC

* Auto Tangle This File

#+BEGIN_SRC emacs-lisp  :tangle  ~/init.el
  (defun if-Emacs-org-then-org-babel-tangle ()
      "If current open file is Emacs.org, then `org-babel-tangle`."
      (interactive)

      (when (s-equals? (f-filename buffer-file-name) "Emacs.org")
          (org-babel-tangle)))

  (add-hook 'after-save-hook 'if-Emacs-org-then-org-babel-tangle)
#+END_SRC

